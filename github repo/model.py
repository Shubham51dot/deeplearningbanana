{"metadata":{"language_info":{"name":"python","version":"3.7.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nclass QNetwork(nn.Module):\n    def __init__(self, state_size, action_size, seed, fc1_units=64, fc2_units=64, use_dueling=False):\n        super(QNetwork, self).__init__()\n        self.seed = torch.manual_seed(seed)\n        self.use_dueling = use_dueling\n        self.fc1 = nn.Linear(state_size, fc1_units)\n        self.fc2 = nn.Linear(fc1_units, fc2_units)\n        self.fc3 = nn.Linear(fc2_units, action_size)\n        self.state_value = nn.Linear(fc2_units, 1)\n    def forward(self, state):\n        x = F.relu(self.fc1(state))\n        x = F.relu(self.fc2(x))\n        if self.use_dueling:\n            return self.fc3(x) + self.state_value(x)\n        else:\n            return self.fc3(x)","metadata":{},"execution_count":null,"outputs":[]}]}