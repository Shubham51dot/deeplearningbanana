{"metadata":{"language_info":{"name":"python","version":"3.7.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport random\nfrom collections import namedtuple, deque\nfrom model import QNetwork\nimport torch\nimport torch.nn.functional as F\nimport torch.optim as optim\nBUFFER_SIZE = int(1e5)  \nBATCH_SIZE = 64        \nGAMMA = 0.99            \nLR = 5e-4               \nTAU = 1e-3              \nUPDATE_EVERY = 4       \ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nclass Agent():\n    def __init__(self, state_size, action_size, seed, use_dueling=False, use_double=False):\n        self.state_size = state_size\n        self.action_size = action_size\n        self.seed = random.seed(seed)\n        self.use_dueling = use_dueling\n        self.use_double = use_double\n        self.qnetwork_local = QNetwork(state_size, action_size, seed,\n                                        use_dueling=use_dueling).to(device)\n        self.qnetwork_target = QNetwork(state_size, action_size, seed,\n                                        use_dueling=use_dueling).to(device)\n        self.optimizer = optim.Adam(self.qnetwork_local.parameters(), lr=LR)\n        self.memory = ReplayBuffer(action_size, BUFFER_SIZE, BATCH_SIZE, seed)\n        self.t_step = 0\n    def step(self, state, action, reward, next_state, done):\n        self.memory.add(state, action, reward, next_state, done)\n        self.t_step = (self.t_step + 1) % UPDATE_EVERY\n        if self.t_step == 0:\n            if len(self.memory) > BATCH_SIZE:\n                experiences = self.memory.sample()\n                self.learn(experiences, GAMMA)\n    def act(self, state, eps=0.):\n        state = torch.from_numpy(state).float().unsqueeze(0).to(device)\n        self.qnetwork_local.eval()\n        with torch.no_grad():\n            action_values = self.qnetwork_local(state)\n        self.qnetwork_local.train()\n        if random.random() > eps:\n            return np.argmax(action_values.cpu().data.numpy())\n        else:\n            return random.choice(np.arange(self.action_size))\n    def learn(self, experiences, gamma):\n        states, actions, rewards, next_states, dones = experiences\n        if self.use_double:\n            indices = torch.argmax(self.qnetwork_local(next_states).detach(),1)\n            Q_targets_next = self.qnetwork_target(next_states).detach().gather(1,indices.unsqueeze(1))\n        else:\n            Q_targets_next = self.qnetwork_target(next_states).detach().max(1)[0].unsqueeze(1)\n       \n        Q_targets = rewards + (gamma * Q_targets_next * (1 - dones))\n        Q_expected = self.qnetwork_local(states).gather(1, actions)\n        loss = F.mse_loss(Q_expected, Q_targets)\n        self.optimizer.zero_grad()\n        loss.backward()\n        self.optimizer.step()\n        self.soft_update(self.qnetwork_local, self.qnetwork_target, TAU)\n    def soft_update(self, local_model, target_model, tau):\n        for target_param, local_param in zip(target_model.parameters(), local_model.parameters()):\n            target_param.data.copy_(tau*local_param.data + (1.0-tau)*target_param.data)\nclass ReplayBuffer:\n    def __init__(self, action_size, buffer_size, batch_size, seed):\n        self.action_size = action_size\n        self.memory = deque(maxlen=buffer_size)\n        self.batch_size = batch_size\n        self.experience = namedtuple(\"Experience\", field_names=[\"state\", \"action\", \"reward\", \"next_state\", \"done\"])\n        self.seed = random.seed(seed)\n    def add(self, state, action, reward, next_state, done):\n        e = self.experience(state, action, reward, next_state, done)\n        self.memory.append(e)\n    def sample(self):\n        experiences = random.sample(self.memory, k=self.batch_size)\n        states = torch.from_numpy(np.vstack([e.state for e in experiences if e is not None])).float().to(device)\n        actions = torch.from_numpy(np.vstack([e.action for e in experiences if e is not None])).long().to(device)\n        rewards = torch.from_numpy(np.vstack([e.reward for e in experiences if e is not None])).float().to(device)\n        next_states = torch.from_numpy(np.vstack([e.next_state for e in experiences if e is not None])).float().to(device)\n        dones = torch.from_numpy(np.vstack([e.done for e in experiences if e is not None]).astype(np.uint8)).float().to(device)\n        return (states, actions, rewards, next_states, dones)\n    def __len__(self):\n        return len(self.memory)","metadata":{},"execution_count":null,"outputs":[]}]}